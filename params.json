{"name":"Introductionspring4","tagline":"Estudo Spring 4 - Estrutura JSF","body":"### 2.2 Modules\r\nThe Spring Framework consists of features organized into about 20 modules. These modules are grouped into Core Container, Data Access/Integration, Web, AOP (Aspect Oriented Programming), Instrumentation, and Test, as shown in the following diagram.\r\n\r\nFigure 2.1. Overview of the Spring Framework\r\n\r\n![Overview of the Spring Framework](http://docs.spring.io/spring/docs/4.0.6.RELEASE/spring-framework-reference/htmlsingle/images/spring-overview.png)\r\n\r\n### 2.2.1 Core Container\r\n\r\nThe Core Container consists of the Core, Beans, Context, and Expression Language modules.\r\n\r\nThe Core and Beans modules provide the fundamental parts of the framework, including the IoC and Dependency Injection features. The BeanFactory is a sophisticated implementation of the factory pattern. It removes the need for programmatic singletons and allows you to decouple the configuration and specification of dependencies from your actual program logic.\r\n\r\nThe Context module builds on the solid base provided by the Core and Beans modules: it is a means to access objects in a framework-style manner that is similar to a JNDI registry. The Context module inherits its features from the Beans module and adds support for internationalization (using, for example, resource bundles), event-propagation, resource-loading, and the transparent creation of contexts by, for example, a servlet container. The Context module also supports Java EE features such as EJB, JMX ,and basic remoting. The ApplicationContext interface is the focal point of the Context module.\r\n\r\nThe Expression Language module provides a powerful expression language for querying and manipulating an object graph at runtime. It is an extension of the unified expression language (unified EL) as specified in the JSP 2.1 specification. The language supports setting and getting property values, property assignment, method invocation, accessing the context of arrays, collections and indexers, logical and arithmetic operators, named variables, and retrieval of objects by name from Spring’s IoC container. It also supports list projection and selection as well as common list aggregations.\r\n\r\n### 2.2.2 Data Access/Integration\r\n\r\nThe Data Access/Integration layer consists of the JDBC, ORM, OXM, JMS and Transaction modules.\r\n\r\nThe JDBC module provides a JDBC-abstraction layer that removes the need to do tedious JDBC coding and parsing of database-vendor specific error codes.\r\n\r\nThe ORM module provides integration layers for popular object-relational mapping APIs, including JPA, JDO, and Hibernate. Using the ORM package you can use all of these O/R-mapping frameworks in combination with all of the other features Spring offers, such as the simple declarative transaction management feature mentioned previously.\r\n\r\nThe OXM module provides an abstraction layer that supports Object/XML mapping implementations for JAXB, Castor, XMLBeans, JiBX and XStream.\r\n\r\nThe Java Messaging Service (JMS) module contains features for producing and consuming messages.\r\n\r\nThe Transaction module supports programmatic and declarative transaction management for classes that implement special interfaces and for all your POJOs (plain old Java objects).\r\n\r\n### 2.2.3 Web\r\n\r\nThe Web layer consists of the Web, Web-Servlet, WebSocket and Web-Portlet modules.\r\n\r\nSpring’s Web module provides basic web-oriented integration features such as multipart file-upload functionality and the initialization of the IoC container using servlet listeners and a web-oriented application context. It also contains the web-related parts of Spring’s remoting support.\r\n\r\nThe Web-Servlet module contains Spring’s model-view-controller (MVC) implementation for web applications. Spring’s MVC framework provides a clean separation between domain model code and web forms, and integrates with all the other features of the Spring Framework.\r\n\r\nThe Web-Portlet module provides the MVC implementation to be used in a portlet environment and mirrors the functionality of Web-Servlet module.\r\n\r\n### 2.2.4 AOP and Instrumentation\r\n\r\nSpring’s AOP module provides an AOP Alliance-compliant aspect-oriented programming implementation allowing you to define, for example, method-interceptors and pointcuts to cleanly decouple code that implements functionality that should be separated. Using source-level metadata functionality, you can also incorporate behavioral information into your code, in a manner similar to that of .NET attributes.\r\n\r\nThe separate Aspects module provides integration with AspectJ.\r\n\r\nThe Instrumentation module provides class instrumentation support and classloader implementations to be used in certain application servers.\r\n\r\n### 2.2.5 Test\r\n\r\nThe Test module supports the testing of Spring components with JUnit or TestNG. It provides consistent loading of Spring ApplicationContexts and caching of those contexts. It also provides mock objects that you can use to test your code in isolation.\r\n\r\n\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}